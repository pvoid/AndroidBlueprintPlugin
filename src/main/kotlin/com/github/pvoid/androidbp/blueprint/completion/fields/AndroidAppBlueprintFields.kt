/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

package com.github.pvoid.androidbp.blueprint.completion.fields

val ANDROID_APP_FIELDS = listOf(
    BlueprintStringField("name", "The name of the module. Must be unique across all modules."),
    BlueprintStringListField("srcs",  "List of source files used to compile the Java module. May be .java, .kt, .logtags, .proto, or .aidl files."),
    BlueprintStringListField("exclude_srcs", "List of source files that should not be used to build the Java module. This is most useful in the arch/multilib variants to remove non-common files"),
    BlueprintLibrariesListField("defaults", ""),
    BlueprintBooleanField("aapt_include_all_resources", "Include all resource configurations, not just the product-configured ones."),
    BlueprintStringListField("aaptflags", "Flags passed to aapt when creating the apk"),
    BlueprintReferencesListField("additional_certificates", "Names of extra android_app_certificate modules to sign the apk with in the form \":module\"."),
    BlueprintStringListField("additional_manifests", "Paths to additional manifest files to merge with main manifest."),
    BlueprintObjectField("aidl","", listOf(
        BlueprintStringListField("include_dirs", "Top level directories to pass to aidl tool"),
        BlueprintStringListField("local_include_dirs", "Directories rooted at the Android.bp file to pass to aidl tool"),
        BlueprintStringListField("export_include_dirs",  "directories that should be added as include directories for any aidl sources of modules that depend on this module, as well as to aidl for this module."),
        BlueprintBooleanField("generate_traces",  "whether to generate traces (for systrace) for this interface"),
        BlueprintBooleanField("generate_get_transaction_name", "whether to generate Binder#GetTransaction name method."),
        BlueprintStringListField("flags",  "list of flags that will be passed to the AIDL compiler"),
    )),
    BlueprintStringListField("apex_available", "Availability of this module in APEXes. Only the listed APEXes can contain this module. If the module has stubs then other APEXes and the platform may access it through them (subject to visibility). \"//apex_available:anyapex\" is a pseudo APEX name that matches to any APEX. \"//apex_available:platform\" refers to non-APEX partitions like \"system.img\". \"com.android.gki.*\" matches any APEX module name with the prefix \"com.android.gki.\". Default is [\"//apex_available:platform\"]."),
    BlueprintInterfaceField("arch", ""),
    BlueprintStringListField("asset_dirs", "List of directories relative to the Blueprints file containing assets. Defaults to [\"assets\"] if a directory called assets exists. Set to [] to disable the default."),
    BlueprintStringField("certificate", "The name of a certificate in the default certificate directory, blank to use the default product certificate, or an android_app_certificate module name in the form \":module\"."),
    BlueprintStringListField("common_srcs", "List Kotlin of source files containing Kotlin code that should be treated as common code in a codebase that supports Kotlin multiplatform. See https://kotlinlang.org/docs/reference/multiplatform.html. May be only be .kt files."),
    BlueprintBooleanField("compile_dex", "If set to true, compile dex regardless of installable. Defaults to false."),
    BlueprintStringField("compile_multilib", "Control whether this module compiles for 32-bit, 64-bit, or both. Possible values are \"32\" (compile for 32-bit only), \"64\" (compile for 64-bit only), \"both\" (compile for both architectures), or \"first\" (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform)."),
    BlueprintBooleanField("debug_ramdisk", "Whether this module is installed to debug ramdisk"),
    BlueprintBooleanField("device_specific", "Whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."),
    BlueprintObjectField("dex_preopt", "", listOf(
         BlueprintBooleanField("enabled", "If false, prevent dexpreopting. Defaults to true."),
         BlueprintBooleanField("app_image", "If true, generate an app image (.art file) for this module."),
         BlueprintBooleanField("profile_guided", "If true, use a checked-in profile to guide optimization. Defaults to false unless a matching profile is set or a profile is found in PRODUCT_DEX_PREOPT_PROFILE_DIR that matches the name of this module, in which case it is defaulted to true."),
         BlueprintStringField("profile", "If set, provides the path to profile relative to the Android.bp file. If not set, defaults to searching for a file that matches the name of this module in the default profile location set by PRODUCT_DEX_PREOPT_PROFILE_DIR, or empty if not found."),
    )),
    BlueprintObjectField("dist", "\"configuration\" to distribute output files from this module to the distribution directory (default: \$OUT/dist, configurable with \$DIST_DIR", listOf(
         BlueprintStringListField("targets", "Copy the output of this module to the \$DIST_DIR when `dist` is specified on the command line and any of these targets are also on the command line, or otherwise built"),
         BlueprintStringField("dest", "The name of the output artifact. This defaults to the basename of the output of the module."),
         BlueprintStringField("dir", "The directory within the dist directory to store the artifact. Defaults to the top level directory (\"\")."),
         BlueprintStringField("suffix", "A suffix to add to the artifact file name (before any extension)."),
         BlueprintStringField("tag", "A string tag to select the OutputFiles associated with the tag. If no tag is specified then it will select the default dist paths provided by the module type. If a tag of \"\" is specified then it will return the default output files provided by the modules, i.e. the result of calling OutputFiles(\"\")."),
    )),
    BlueprintStringListField("dists", "A list of configurations to distribute output files from this module to the distribution directory (default: \$OUT/dist, configurable with \$DIST_DIR"),
    BlueprintBooleanField("dont_merge_manifests", "Do not include AndroidManifest from dependent libraries"),
    BlueprintStringListField("dxflags", "List of module-specific flags that will be used for dex compiles"),
    BlueprintBooleanField("embed_notices", "If set, find and merge all NOTICE files that this module and its dependencies have and store it in the APK as an asset."),
    BlueprintBooleanField("enabled", "emit build rules for this module Disabling a module should only be done for those modules that cannot be built in the current environment. Modules that can build in the current environment but are not usually required (e.g. superceded by a prebuilt) should not be disabled as that will prevent them from being built by the checkbuild target and so prevent early detection of changes that have broken those modules."),
    BlueprintBooleanField("enforce_uses_libs", "If true, the list of uses_libs and optional_uses_libs modules must match the AndroidManifest.xml file. Defaults to true if either uses_libs or optional_uses_libs is set. Will unconditionally default to true in the future."),
    BlueprintObjectField("errorprone", "", listOf(
         BlueprintStringListField("javacflags", "List of javac flags that should only be used when running errorprone."),
         BlueprintStringListField("extra_check_modules", "List of java_plugin modules that provide extra errorprone checks."),
    )),
    BlueprintStringListField("exclude_java_resource_dirs", "list of directories that should be excluded from java_resource_dirs"),
    BlueprintStringListField("exclude_java_resources", "list of files that should be excluded from java_resources and java_resource_dirs"),
    BlueprintBooleanField("export_package_resources", "If set, create package-export.apk, which other packages can use to get PRODUCT-agnostic resource data like IDs and type definitions."),
    BlueprintStringListField("exported_plugins", "List of modules to export to libraries that directly depend on this library as annotation processors. Note that if the plugins set generates_api: true this will disable the turbine optimization on modules that depend on this module, which will reduce parallelism and cause more recompilation."),
    BlueprintStringListField("hiddenapi_additional_annotations", "A list of java_library instances that provide additional hiddenapi annotations for the library."),
    BlueprintLibrariesListField("host_required", "names of other modules to install on host if this module is installed"),
    BlueprintBooleanField("hostdex", "If true, export a copy of the module as a -hostdex module for host testing."),
    BlueprintBooleanField("include_srcs", "If set to true, include sources used to compile the module in to the final jar"),
    BlueprintStringListField("init_rc", "init.rc files to be installed if this module is installed"),
    BlueprintBooleanField("installable", "If set to true, allow this module to be dexed and installed on devices. Has no effect on host modules, which are always considered installable. Default: true"),
    BlueprintObjectField("jacoco", "", listOf(
        BlueprintStringListField("include_filter", "List of classes to include for instrumentation with jacoco to collect coverage information at runtime when building with coverage enabled. If unset defaults to all classes. Supports '*' as the last character of an entry in the list as a wildcard match. If preceded by '.' it matches all classes in the package and subpackages, otherwise it matches classes in the package that have the class name as a prefix."),
        BlueprintStringListField("exclude_filter", "List of classes to exclude from instrumentation with jacoco to collect coverage information at runtime when building with coverage enabled. Overrides classes selected by the include_filter property. Supports '*' as the last character of an entry in the list as a wildcard match. If preceded by '.' it matches all classes in the package and subpackages, otherwise it matches classes in the package that have the class name as a prefix."),
    )),
    BlueprintStringField("jarjar_rules", "if not blank, run jarjar using the specified rules file"),
    BlueprintStringListField("java_resource_dirs", "list of directories containing Java resources"),
    BlueprintStringListField("java_resources", "list of files to use as Java resources"),
    BlueprintStringField("java_version", "If not blank, set the java version passed to javac as -source and -target"),
    BlueprintNumberField("javac_shard_size", "The number of Java source entries each Javac instance can process"),
    BlueprintStringListField("javacflags", "list of module-specific flags that will be used for javac compiles"),
    BlueprintLibrariesListField("jni_libs", "list of native libraries that will be provided in or alongside the resulting jar"),
    BlueprintBooleanField("jni_uses_platform_apis", "if true, use JNI libraries that link against platform APIs even if this module sets sdk_version."),
    BlueprintBooleanField("jni_uses_sdk_apis", "if true, use JNI libraries that link against SDK APIs even if this module does not set sdk_version."),
    BlueprintStringListField("kotlincflags", "list of module-specific flags that will be used for kotlinc compiles"),
    BlueprintLibrariesListField("libs", "list of java libraries that will be in the classpath"),
    BlueprintStringListField("licenses", "Describes the licenses applicable to this module. Must reference license modules."),
    BlueprintStringField("lineage", "Name of the signing certificate lineage file or filegroup module."),
    BlueprintObjectField("lint", "Controls for running Android Lint on the module.", listOf(
        BlueprintBooleanField("enabled", "If true, run Android Lint on the module. Defaults to true."),
        BlueprintStringListField("flags", "Flags to pass to the Android Lint tool."),
        BlueprintStringListField("fatal_checks", "Checks that should be treated as fatal."),
        BlueprintStringListField("error_checks", "Checks that should be treated as errors."),
        BlueprintStringListField("warning_checks", "Checks that should be treated as warnings."),
        BlueprintStringListField("disabled_checks", "Checks that should be skipped."),
        BlueprintStringListField("extra_check_modules", "Modules that provide extra lint checks"),
        BlueprintStringField("baseline_filename", "Name of the file that lint uses as the baseline. Defaults to \"lint-baseline.xml\"."),
    )),
    BlueprintStringField("logging_parent", "the logging parent of this app."),
    BlueprintStringField("manifest", "path to AndroidManifest.xml. If unset, defaults to \"AndroidManifest.xml\"."),
    BlueprintStringField("min_sdk_version", "if not blank, set the minimum version of the sdk that the compiled artifacts will run against. Defaults to sdk_version if not set."),
    BlueprintInterfaceField("multilib", ""),
    BlueprintBooleanField("native_bridge_supported", "Whether this module is built for non-native architectures (also known as native bridge binary)"),
    BlueprintStringField("notice", "relative path to a file to include in the list of notices for the device"),
    BlueprintObjectField("openjdk9", "", listOf(
        BlueprintStringListField("srcs", "List of source files that should only be used when passing -source 1.9 or higher"),
        BlueprintStringListField("javacflags", "List of javac flags that should only be used when passing -source 1.9 or higher"),
    )),
    BlueprintObjectField("optimize", "", listOf(
         BlueprintBooleanField("enabled", "If false, disable all optimization. Defaults to true for android_app and android_test modules, false for java_library and java_test modules."),
         BlueprintBooleanField("proguard_compatibility", "If true, runs R8 in Proguard compatibility mode (default). Otherwise, runs R8 in full mode."),
         BlueprintBooleanField("shrink", "If true, optimize for size by removing unused code. Defaults to true for apps, false for libraries and tests. Default: true"),
         BlueprintBooleanField("optimize", "If true, optimize bytecode. Defaults to false."),
         BlueprintBooleanField("obfuscate", "If true, obfuscate bytecode. Defaults to false."),
         BlueprintBooleanField("no_aapt_flags", "If true, do not use the flag files generated by aapt that automatically keep classes referenced by the app manifest. Defaults to false."),
         BlueprintStringListField("proguard_flags", "Flags to pass to proguard."),
         BlueprintStringListField("proguard_flags_files", "Specifies the locations of files containing proguard flags."),
    )),
    BlueprintLibrariesListField("optional_uses_libs", "A list of shared library modules that will be listed in uses-library tags in the AndroidManifest.xml file with required=false."),
    BlueprintStringListField("overrides", "Names of modules to be overridden. Listed modules can only be other binaries (in Make or Soong). This does not completely prevent installation of the overridden binaries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other binary will be removed from PRODUCT_PACKAGES."),
    BlueprintStringField("owner", "vendor who owns this module"),
    BlueprintStringField("package_name", "the package name of this app. The package name in the manifest file is used if one was not given."),
    BlueprintStringListField("package_splits", "list of resource labels to generate individual resource packages"),
    BlueprintStringField("patch_module", "When compiling language level 9+ .java code in packages that are part of a system module, patch_module names the module that your sources and dependencies should be patched into. The Android runtime currently doesn't implement the JEP 261 module system so this option is only supported at compile time. It should only be needed to compile tests in packages that exist in libcore and which are inconvenient to move elsewhere."),
    BlueprintStringListField("permitted_packages", "If not empty, classes are restricted to the specified packages and their sub-packages. This restriction is checked after applying jarjar rules and including static libs."),
    BlueprintBooleanField("platform_apis", "Whether to compile against the platform APIs instead of an SDK. If true, then sdk_version must be empty. The value of this field is ignored when module's type isn't android_app."),
    BlueprintStringListField("plugins", "List of modules to use as annotation processors"),
    BlueprintBooleanField("privileged", "Specifies that this app should be installed to the priv-app directory, where the system will grant it additional privileges not available to normal apps."),
    BlueprintBooleanField("product_specific", "whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."),
    BlueprintBooleanField("proprietary", "whether this is a proprietary vendor module, and should be installed into /vendor"),
    BlueprintObjectField("proto", "", listOf(
        BlueprintStringField("type", "Proto generator type. C++: full or lite. Java: micro, nano, stream, or lite."),
        BlueprintLibraryField("plugin", "Proto plugin to use as the generator. Must be a cc_binary_host module."),
        BlueprintStringListField("include_dirs", "list of directories that will be added to the protoc include paths."),
        BlueprintStringListField("local_include_dirs", "list of directories relative to the bp file that will be added to the protoc include paths."),
        BlueprintBooleanField("canonical_path_from_root", "whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."),
        BlueprintStringListField("output_params", "List of extra options that will be passed to the proto generator."),
    )),
    BlueprintStringField("provides_uses_lib", "Optional name of the <uses-library> provided by this module. This is needed for non-SDK libraries, because SDK ones are automatically picked up by Soong. The <uses-library> name normally is the same as the module name, but there are exceptions."),
    BlueprintBooleanField("ramdisk", "Whether this module is installed to ramdisk"),
    BlueprintBooleanField("recovery", "Whether this module is installed to recovery partition"),
    BlueprintBooleanField("rename_resources_package", "Whether to rename the package in resources to the override name rather than the base name. Defaults to true."),
    BlueprintLibrariesListField("required", "names of other modules to install if this module is installed"),
    BlueprintStringListField("resource_dirs", "list of directories relative to the Blueprints file containing Android resources. Defaults to [\"res\"] if a directory called res exists. Set to [] to disable the default."),
    BlueprintStringListField("resource_zips", "list of zip files containing Android resources."),
    BlueprintStringField("sdk_version", "if not blank, set to the version of the sdk to compile against. Defaults to compiling against the current platform."),
    BlueprintStringListField("services", "List of files to include in the META-INF/services folder of the resulting jar."),
    BlueprintBooleanField("soc_specific", "whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."),
    BlueprintBooleanField("static_kotlin_stdlib", "If true, package the kotlin stdlib into the jar. Defaults to true."),
    BlueprintLibrariesListField("static_libs", "list of java libraries that will be compiled into the resulting jar"),
    BlueprintStringField("stem", "set the name of the output"),
    BlueprintStringField("stl", "STL library to use for JNI libraries."),
    BlueprintBooleanField("system_ext_specific", "whether this module extends system. When set to true, it is installed into /system_ext (or /system/system_ext if system_ext partition does not exist)."),
    BlueprintStringField("system_modules", " When targeting 1.9 and above, override the modules to use with --system, otherwise provides defaults libraries to add to the bootclasspath."),
    BlueprintObjectField("target", "", listOf(
        BlueprintObjectField("host","", listOf(
            BlueprintStringField("compile_multilib", "")
        )),
        BlueprintObjectField("android", "", listOf(
            BlueprintStringField("compile_multilib", "")
        )),
        BlueprintObjectField("hostdex", "", listOf(
            BlueprintLibrariesListField("required", "Additional required dependencies to add to -hostdex modules.")
        )),
    )),
    BlueprintLibrariesListField("target_required", "names of other modules to install on target if this module is installed"),
    BlueprintStringField("target_sdk_version", "if not blank, set the targetSdkVersion in the AndroidManifest.xml. Defaults to sdk_version if not set."),
    BlueprintBooleanField("uncompress_dex", "Keep the data uncompressed. We always need uncompressed dex for execution, so this might actually save space by avoiding storing the same data twice. This defaults to reasonable value based on module and should not be set. It exists only to support ART tests."),
    BlueprintBooleanField("updatable", "Whether this app is considered mainline updatable or not. When set to true, this will enforce additional rules to make sure an app can safely be updated. Default is false. Prefer using other specific properties if build behaviour must be changed; avoid using this flag for anything but neverallow rules (unless the behaviour change is invisible to owners)."),
    BlueprintBooleanField("use_embedded_dex", "Store dex files uncompressed in the APK and set the android:useEmbeddedDex=\"true\" manifest attribute so that they are used from inside the APK at runtime."),
    BlueprintBooleanField("use_embedded_native_libs", "Store native libraries uncompressed in the APK and set the android:extractNativeLibs=\"false\" manifest flag so that they are used from inside the APK at runtime. Defaults to true for android_test modules unless sdk_version or min_sdk_version is set to a version that doesn't support it (<23), defaults to true for android_app modules that are embedded to APEXes, defaults to false for other module types where the native libraries are generally preinstalled outside the APK." ),
    BlueprintBooleanField("use_tools_jar", "Add host jdk tools.jar to bootclasspath"),
    BlueprintLibrariesListField("uses_libs", "A list of shared library modules that will be listed in uses-library tags in the AndroidManifest.xml file."),
    BlueprintBooleanField("v4_signature", "If true, generate the signature file of APK Signing Scheme V4, along side the signed APK file. Defaults to false."),
    BlueprintBooleanField("vendor", "whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."),
    BlueprintBooleanField("vendor_ramdisk", "Whether this module is installed to vendor ramdisk"),
    BlueprintStringListField("vintf_fragments", "VINTF manifest fragments to be installed if this module is installed"),
    BlueprintStringField("visibility", "Controls the visibility of this module to other modules. Allowable values are one or more of these formats:"),
)